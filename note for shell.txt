Shell中的变量
变量名称+=+新值，中间没有空格，取出shell变量的值，需要在变量名称前加上$字符，当所赋的值内含空格时，请加上引号。
echo输出
语法：echo [string...]    用途：产生Shell脚本的输出末尾自动带换行（添加-n会去掉末尾的换行）  会解释每个字符串里的转义序列。转义序列可用来表示特殊字符，以及控制其行为模式。但是该命令的版本兼容性有问题，所以一般只用来输出最简单的形式。
printf输出
语法：printf format-string [arguents ...]     类似于echo但是末尾默认不带换行如果需要则加“\n”，特别的，支持占位符，例如：printf "The first program always prints '%s,%s'" Hello word
基本的I/O重定向
cat不指定参数表示读取标准输入，写入标准输出；
cat file表示查看file内容；
cat > file表示创建或覆盖新文件，并键入内容以Ctrl+D结束；
cat >> file表示创建或附加文件，并键入内容以Ctrl+D结束；
tr命令：语法tr [options] soruce-char-list replace-char-list   用途：转换字符
以<改变标准输入
program < file可将program的标准输入修改为file（默认应该是键盘输入）
tr -d '\r' < dos-file.txt'...    去除dos-file.txt文件中的换行字符
以>改变标准输出
program > file 可将program的标准输出修改为file
tr -d '\r' < dos-file.txt > unix-file.txt   先以tr将dos-file.txt里的回车删除，再将转换完成的数据输出到unix-file.txt，dos-file.txt中的原始数据不会发生改变
>重定向符在目的文件不存在时会新建一个。如果存在就会被覆盖，原本数据会丢失
以>>附加到文件
program >> file 可将program的标准输出附加到file的结尾处
如果目的文件不存在，>>重定向符会创建一个，如果存在，不会直接覆盖，而是将程序所产生的数据附加到文件结尾处
以 | 建立管道
program1 | program2可将program1的标准输出修改为program2的标准输入
例如：tr -d '\r' < dos-file.txt | sort > unix-file.txt    这条管道会先删除输入文件内的回车，然后排序，然后输出到目的文件
stty命令用来控制终端的各种设置。-echo选项用来关闭自动打印每个输入字符的功能；stty echo用来恢复该功能
执行跟踪
sh -x file打开跟踪功能并开始执行脚本  可以在脚本内部set -x命令将执行跟踪的功能打开，然后再用set +x命令关闭
grep语法
grep [options...] pattern-spec [files...]  用途：显示匹配一个或多个模式的文本行。时常会作为管道的第一步，以便对匹配的数据作进一步处理
主要选项：
-E  使用扩展正则表达式进行匹配
-F  使用固定组富川进行匹配
-e pat-list  通常，第一个非选项的参数会指定要匹配的模式。你也可以提供多个模式，只要将他们放在引号里并以换行字符分隔他们。模式以减号开头时，grep会混淆，而将他视为选项。这就是-e选项派上用场的时候，他可以指定其参数为模式――即使他以减号开头。
-f pat-file  从pat-file文件读取模式作匹配
-i  模式匹配时忽略字母大小写差异
-l  列出匹配模式的文件名称，而不是打印匹配的行
-q  静默的。如果模式匹配匹配，则grep会成功的离开，而不将匹配的行写入标准输出；否则即是不成功。
-s  不显示错误信息，通常与-q并用
-v  显示不匹配模式的行
Cut命令
语法： cut -c list [file...]    cut -f list [-d delim] [file...] 从输入文件中选择一或多个字段或一组字符，配和管道，可再作进一步处理
-c list    以字符为主，执行剪下的操作。list为字符编号或一段范围的列表（以逗号隔开），例如1,3,5-12,42
-d delim   通过-f选项，使用delim作为定界符。默认的定界符为制表符（Tab）
-f list   以字段为主，作剪下的操作。list为字段编号或一段范围的列表（以逗号隔开）

join命令
语法：join [options...] file1 file2   以共同一个键值，将已存储文件内的记录加以结合。
主要选项：
-1 field1
-2 field2    标明要结合的字段。-1  field1指的是从file1去除field1，而-2 field2指的是从file2去除field2.字段编号自1开始，而非0（在较老的系统中可能要用-j1与-j2）
-o file.field   输出file文件中的field字段。一般的字段则不打印。除非使用多个-o选项，即可显示多个输出字段
-t separator    使用separator作为输入字段分割字符，而非使用空白。此字符也为输出的字段分割字符
sort命令
语法：sort [options] [file(s)]    将输入行按照键值字段与数据类型选项以及locale排序
主要选项：
-b   忽略开头的空白
-c   检查输入是否已正确的排序。如输入未经排序，但退出码为非零值，则不会有任何输出
-d   字典顺序：仅文字数字与空白才有意义
-g   一般数值：以浮点数字类型比较字段。这个选项的运作有点类似-n，差别仅在于这个选项的数字可能有小数点及指数（例：6.022e+23）。
-f   将混用的字母都看作相同大小写，也就是以不管字母大小写的方式排序。
-i   忽略无法打印的字符
-k   定义排序键值字段
-m   将已排序的输入文件，合并为一个排序后的输出数据流
-n   以整数类型比较字段
-o outfile   将输出写到指定的文件，而非标准输出。如果该文件为输入文件之一，则sort在进行排序与写到输出文件之前，就会先将他复制到一个临时的文件。
-r   倒置排序的顺序为由大致小，而非默认的由小至大
-t char   使用单个字符char作为默认的字段分割字符，取代默认的空白字符
-u   只有唯一的记录：丢弃所有具有相同键值的纪录，只留其中的第一条，只有键值字段是重要的，也就是说：被丢弃的记录其他部分可能是不同值。
wc字数计算工具
wc默认输出一行报告，包括行数、字数以及字节数，要求仅输出部分结果时，可使用的选项有：-c（字节数）、-l（行数）、-w（字数）
提取开头或结尾数行
head -n 行数 [file(s)]       或者   sed 行数q [file(s)]
tail -n 行数 [file(s)]
在交互式Shell通信期中，有时需要监控某个文件的输出――如日志这类持续写入的文件。-f派上用场，它可以要求tail显示指定的文件结尾行数，接着进入无止尽的循环中――休息
一秒后又再度醒来并检查是否需要显示更多的输出结果。在设置-f的状态下，tail只有当你中断它时才会停止――通常是输入Ctrl+C中断：
$ tail -n 25 -f /var/log/messages       观察不断成长的系统信息日志
















